<!-- <script src="vendor/jquery/jquery.min.js"></script>
<script src="vendor/bootstrap/js/bootstrap.bundle.min.js"></script> -->
<!-- <script src="/vendor/jquery-easing/jquery.easing.min.js"></script> -->

<script>
    require([
        "esri/Map",
        "esri/views/MapView",
        "esri/Graphic",
        "esri/layers/GraphicsLayer",
        "esri/widgets/TimeSlider",
        "esri/widgets/Expand",
    ], function (Map, MapView, Graphic, GraphicsLayer, TimeSlider, Expand) {

        var map = new Map({
            basemap: "hybrid",
        });

        map.on("load", function () {
            map.graphics.enableMouseEvents();
        });

        var view = new MapView({
            container: "viewDiv",
            map: map,
            center: [105.8066925, 15.9030623], //Longitude, latitude
            zoom: 6,
        });

        var data =<%- JSON.stringify(cities) %>
        var infoCity =<%- JSON.stringify(infoCity) %>
        var graphicsLayer1 = new GraphicsLayer();
        
        var graphicsLayer = new GraphicsLayer();

        var createGraphic = function (data) {
            return new Graphic({
                geometry: data,
                symbol: data.symbol,
                attributes: data,
                popupTemplate: data.popupTemplate,
            });
        };
        var color = [];
        var jsondata = {
            polygons: []
        };


        const infoNote = document.getElementById("infoNote");
        const legendExpand = new Expand({
            view: view,
            content: infoNote,
            expanded: true
        });
        view.ui.add(legendExpand, "bottom-left");

        const statsDivEvent = document.getElementById("statsDivEvent");
        const infoDiv = document.getElementById("infoDiv");
        const infoDivExpand = new Expand({
            view: view,
            content: infoDiv,
            expanded: true
        });
        view.ui.add(infoDivExpand, "top-right");

        timeSlider = new TimeSlider({
            container: "timeline-city",
            view: view,
            fullTimeExtent: {
                start: new Date(1975, 0, 1),
                end: new Date(2020, 0, 1)
            },
            mode: "cumulative-from-start",
            playRate: 3000,
            stops: {
                interval: {
                    value: 1,
                    unit: "years"
                }
            }
        });

        function checkCityType(id) {
            var result = infoCity.find( (data) => data.IDC === id);
            return result;
        }
        function checkArraySimilar(id, arrays) {
            return arrays.some( (array) => array.IDC === id);
        }

        // update layer view filter to reflect current timeExtent, all protests in layer up to timeExtend
        timeSlider.watch('timeExtent', function (value) {
            var year = value.end.getFullYear();
            map.remove(graphicsLayer1);
            console.log(year);
            var temp = [];
            for (var i= data.length - 1; i >=0 ; i--) {
                if( data[i].YEAR <= year && !checkArraySimilar(data[i].IDC, temp))
                    temp.push(data[i]);
            }

            var temp2 = temp.map((data2) => ({
                type: "polygon",
                rings: JSON.parse(data2.Location),
                Name: checkCityType(data2.IDC).Name,
                Location: "Chua",
                symbol: {
                    color: data2.CityType === 0 ? [255, 0, 0] : data2.CityType === 1 ?  [0, 255, 0] : data2.CityType === 2 ? [0, 0, 255] : [249, 244, 100],
                    type: "simple-fill",
                    outline: {
                        color: data2.CityType === 0 ? [255, 0, 0] : data2.CityType === 1 ?  [0, 255, 0] : data2.CityType === 2 ? [0, 0, 255] : [249, 244, 100],
                        width: 1,
                    },
                },
                popupTemplate: {    
                    title: "{Name}",
                    content:  checkCityType(data2.IDC).CDesc,
                }
                
            }))
            graphicsLayer1 = new GraphicsLayer();
            temp2.forEach((data) => 
                graphicsLayer1.add(createGraphic(data))
            );
            map.add(graphicsLayer1);
            
        
            // var graphicsLayer1 = new GraphicsLayer();
            // jsondata.polygons.forEach(function (data) {
            //     graphicsLayer1.add(createGraphic(data));
            // });
            // map.add(graphicsLayer1);
        });
        view.popup.defaultPopupTemplateEnabled = true;
    });
</script>
<div id="timeline-city">
    <!-- <div class="timeline-city--main">
        <div class="timeline-city__year">
            <p>1975</p>
            <p>1985</p>
            <p>1995</p>
            <p>2005</p>
            <p>2015</p>
            <p>2020</p>
        </div>
        <input type="range" id="vol" name="vol" min="0" max="50" value=0 class="timeline-city__detail">
    </div> -->
</div>
<div id="infoDiv" class="esri-widget">
    <div>
        <b>BẢNG SỰ KIỆN - NĂM <label id="year_event"></label> </b>
    </div>
    <br />
    <div id="statsDivEvent" class="esri-widget"></div>
</div>
<div id="infoNote">
    <div>
        <b>BẢNG CHÚ THÍCH</b>
    </div>
    <br />
    <div id="statsDivNote" class="esri-widget">
        <table class="table_note">
            <tr>
                <td
                    class="note_color"
                    style="background-color: rgb(255, 255, 1, 0.4)"
                ></td>
                <td class="td_note_content">Đô thị loại 1</td>
            </tr>
            <tr>
                <td
                    class="note_color"
                    style="background-color: rgb(254, 1, 252, 0.4)"
                ></td>
                <td class="td_note_content">Đô thị loại 2</td>
            </tr>
            <tr>
                <td
                    class="td_note_color"
                    style="background-color: rgb(255, 0, 0, 0.4)"
                ></td>
                <td class="td_note_content">Đô thị loại 3</td>
            </tr>
            <tr>
                <td
                    class="td_note_color"
                    style="background-color: rgb(255, 154, 0, 0.4)"
                ></td>
                <td class="td_note_content">Đô thị đặc biệt</td>
            </tr>
        </table>
    </div>
</div>
